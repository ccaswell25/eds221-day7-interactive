---
title: "eds221day7interactive"
author: "carly"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
library(datapasta)
library(dplyr)
```

## *Data Wrangling Refresher*

Starting from penguins...

1.  *Only include penguins at dream and biscoe islands*

    ```{r}
    penguins %>% 
      filter(island == "Dream" | island == "Biscoe")
    ```

*2. Remove the year and sex variables*

```{r}
penguins_removed <- penguins %>%
  select(-year, -sex)
```

3.  *Add a new column body_mass_kg with penguin mass converted from g to kg*

    ```{r}
    body_mass_kg <- penguins %>% 
      mutate(body_mass_kg = body_mass_g / 1000)
    ```

4.  *Rename the island variable to location*

    ```{r}
    penguins %>% 
      rename("location" = "island")
    ```

Starting from penguins, write a single piped sequence to:

-limit to adelie penguins

-remove obs where flipper length mm is NA (drop_na())

-group the data by sex

-create a summary table that contains the mean, sd, and sample size of flipper length

```{r}
penguins %>% 
  filter(species == "Adelie") %>% 
  drop_na(flipper_length_mm, sex) %>% 
  group_by(sex) %>% 
  summarise(mean_flipper = mean(flipper_length_mm), sd_flipper = sd(flipper_length_mm), count = n())
```

Another way to get the sample size of groups is to use count...

```{r}
penguins %>% count(species, island, sex, name = "count")
```

Use DataPasta Package!

Using datapasta -\> tribble add in we can paste in data that we've copied from a table

```{r}
animals <- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)
```

```{r}
sites <- data.frame(
  stringsAsFactors = FALSE,
           location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

## Joins!

Full join: Use full_join()

Left join: Use left_join()

Inner join: Use inner_join()

```{r}
full_join_example <- full_join(animals, sites)
```

```{r}
left_join_example <- left_join(animals, sites)
```

```{r}
inner_join_example <- inner_join(animals, sites)
```

## Formatting Dates

We can use **lubridate** package!

We can work with strings using the **stringr** package!

-str_detect() - is the pattern detected T/F?

-str_replace() - replace a string pattern with something else
